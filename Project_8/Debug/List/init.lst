###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           22/Oct/2018  17:53:22
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01
#        directory\Project_6\init.c
#    Command line  =  
#        -f C:\Users\Andrew\AppData\Local\Temp\EW3C9.tmp
#        ("C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01
#        directory\Project_6\init.c" -lC
#        "C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01
#        directory\Project_6\Debug\List" -o
#        "C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01
#        directory\Project_6\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR5994__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" --core=430X --data_model=small -On
#        --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01
#        directory\Project_6\Debug\List\init.lst
#    Object file   =  
#        C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01
#        directory\Project_6\Debug\Obj\init.r43
#
###############################################################################

C:\Users\Andrew\Desktop\“ECE-306_CodeProject_01 directory\Project_6\init.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file initializes all conditions in the board when 
      4          //  Init_Conditions()is called.
      5          //
      6          //
      7          //  Andrew James
      8          //  Sept 2018
      9          //  Built with IAR Embedded Workbench Version: V6.5.4 (7.12.1)
     10          //------------------------------------------------------------------------------
     11          
     12          
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x800
   \   union <unnamed> _A_ADC12CTL0_L
   \                     _A_ADC12CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x802
   \   union <unnamed> _A_ADC12CTL1_L
   \                     _A_ADC12CTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x804
   \   union <unnamed> _A_ADC12CTL2_L
   \                     _A_ADC12CTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x806
   \   union <unnamed> _A_ADC12CTL3_L
   \                     _A_ADC12CTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x812
   \   union <unnamed> _A_ADC12IER0_L
   \                     _A_ADC12IER0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x814
   \   union <unnamed> _A_ADC12IER1_L
   \                     _A_ADC12IER1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x816
   \   union <unnamed> _A_ADC12IER2_L
   \                     _A_ADC12IER2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x820
   \   union <unnamed> _A_ADC12MCTL0_L
   \                     _A_ADC12MCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x822
   \   union <unnamed> _A_ADC12MCTL1_L
   \                     _A_ADC12MCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x824
   \   union <unnamed> _A_ADC12MCTL2_L
   \                     _A_ADC12MCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x826
   \   union <unnamed> _A_ADC12MCTL3_L
   \                     _A_ADC12MCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x828
   \   union <unnamed> _A_ADC12MCTL4_L
   \                     _A_ADC12MCTL4_L:
   \   000000                DS8 2
     14          #include  "functions.h"
     15          #include <string.h>
     16          extern char display_line[4][11];
     17          extern char *display[4];
     18          extern volatile unsigned char display_changed;
     19          extern volatile unsigned char update_display;
     20          extern volatile unsigned int update_display_count;
     21          extern volatile char one_time;
     22          extern char pwm_state;
     23          
     24          void Init_Conditions(void);
     25          
     26          
     27          
     28          
     29          

   \                                 In  segment CODE, align 2
     30          void Init_Conditions(void){
   \                     Init_Conditions:
   \   000000   0A12         PUSH.W  R10
     31           // Initilizes all conditions for LCD and junk
     32          //------------------------------------------------------------------------------
     33            int i;
     34          
     35            for(i=LOW;i<11;i++){
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??Init_Conditions_0:
   \   000004   3A900B00     CMP.W   #0xb, R10
   \   000008   0A34         JGE     ??Init_Conditions_1
     36              display_line[LINE0][i] = RESET_STATE;
   \   00000A   CA43....     MOV.B   #0x0, display_line(R10)
     37              display_line[LINE1][i] = RESET_STATE;
   \   00000E   CA43....     MOV.B   #0x0, display_line + 11(R10)
     38              display_line[LINE2][i] = RESET_STATE;
   \   000012   CA43....     MOV.B   #0x0, display_line + 22(R10)
     39              display_line[LINE3][i] = RESET_STATE;
   \   000016   CA43....     MOV.B   #0x0, display_line + 33(R10)
     40            }
   \   00001A   1A53         ADD.W   #0x1, R10
   \   00001C   F33F         JMP     ??Init_Conditions_0
     41            display_line[LINE0][CHAR10] = LOW;
   \                     ??Init_Conditions_1:
   \   00001E   C243....     MOV.B   #0x0, &display_line + 10
     42            display_line[LINE1][CHAR10] = LOW;
   \   000022   C243....     MOV.B   #0x0, &display_line + 21
     43            display_line[LINE2][CHAR10] = LOW;
   \   000026   C243....     MOV.B   #0x0, &display_line + 32
     44            display_line[LINE3][CHAR10] = LOW;
   \   00002A   C243....     MOV.B   #0x0, &display_line + 43
     45          
     46            display[LINE0] = &display_line[LINE0][LINE0];
   \   00002E   B240........ MOV.W   #display_line, &display
     47            display[LINE1] = &display_line[LINE1][LINE0];
   \   000034   B240........ MOV.W   #display_line + 11, &display + 2
     48            display[LINE2] = &display_line[LINE2][LINE0];
   \   00003A   B240........ MOV.W   #display_line + 22, &display + 4
     49            display[LINE3] = &display_line[LINE3][LINE0];
   \   000040   B240........ MOV.W   #display_line + 33, &display + 6
     50            update_display = LOW;
   \   000046   C243....     MOV.B   #0x0, &update_display
     51            update_display_count = LOW;
   \   00004A   8243....     MOV.W   #0x0, &update_display_count
     52            pwm_state = PORTS;
   \   00004E   C243....     MOV.B   #0x0, &pwm_state
     53          // Interrupts are disabled by default, enable them.
     54            enable_interrupts();
   \   000052   ........     CALLA   #enable_interrupts
     55            
     56          //------------------------------------------------------------------------------
     57          }
   \   000056   3A41         POP.W   R10
   \   000058   1001         RETA
     58          

   \                                 In  segment CODE, align 2
     59          void Init_ADC(void){
   \                     Init_ADC:
     60          //------------------------------------------------------------------------------
     61          // Configure ADC12
     62          
     63          // ADC10CTL0 Register Description
     64            ADC12CTL0 = RESET_STATE;
   \   000000   82430008     MOV.W   #0x0, &0x800
     65            ADC12CTL0 |= ADC12SHT0_2;     // 16 ADC clocks
   \   000004   B2D000020008 BIS.W   #0x200, &0x800
     66            ADC12CTL0 |= ADC12SHT1_2;     // 16 ADC clocks
   \   00000A   B2D000200008 BIS.W   #0x2000, &0x800
     67            ADC12CTL0 |= ADC12MSC;        // First rising edge SHI signal triggers sampling timer
   \   000010   B2D080000008 BIS.W   #0x80, &0x800
     68            ADC12CTL0 |= ADC12ON;         // ADC12 on
   \   000016   B2D010000008 BIS.W   #0x10, &0x800
     69          
     70          // ADC10CTL1 Register Description
     71            ADC12CTL1 = RESET_STATE;
   \   00001C   82430208     MOV.W   #0x0, &0x802
     72            ADC12CTL1 |= ADC12PDIV_0;     // Predivide ADC12_B clock source by 1
   \   000020   924202080208 MOV.W   &0x802, &0x802
     73            ADC12CTL1 |= ADC12SHS_0;      // sample-and-hold source ADC12SC
   \   000026   924202080208 MOV.W   &0x802, &0x802
     74            ADC12CTL1 |= ADC12SHP;      // SAMPCON signal is sourced from the sampling timer.
   \   00002C   B2D000020208 BIS.W   #0x200, &0x802
     75            ADC12CTL1 |= ADC12ISSH_0;     // sample-input signal is not inverted
   \   000032   924202080208 MOV.W   &0x802, &0x802
     76            ADC12CTL1 |= ADC12DIV_0;      // / 1 clock divider
   \   000038   924202080208 MOV.W   &0x802, &0x802
     77            ADC12CTL1 |= ADC12SSEL0;      // ADC12OSC (MODOSC)
   \   00003E   B2D20208     BIS.W   #0x8, &0x802
     78            ADC12CTL1 |= ADC12CONSEQ_3;   // Repeat-sequence-of-channels
   \   000042   B2D006000208 BIS.W   #0x6, &0x802
     79          
     80          // ADC12CTL2 Register Description
     81            ADC12CTL2 = RESET_STATE;
   \   000048   82430408     MOV.W   #0x0, &0x804
     82            ADC12CTL2 |= ADC12RES_2;      // 12-bit conversion results / 14 clock cycle conversion
   \   00004C   B2D020000408 BIS.W   #0x20, &0x804
     83            ADC12CTL2 |= ADC12DF_0;       // Binary unsigned
   \   000052   924204080408 MOV.W   &0x804, &0x804
     84            ADC12CTL2 |= ADC12PWRMD_0;    // Regular power mode where sample rate is not restricted
   \   000058   924204080408 MOV.W   &0x804, &0x804
     85          
     86          // ADC12CTL3 Register Description
     87            ADC12CTL3 = RESET_STATE;
   \   00005E   82430608     MOV.W   #0x0, &0x806
     88            ADC12CTL3 |= ADC12ICH3MAP_0;  // external pin is selected for ADC input channel A26
   \   000062   924206080608 MOV.W   &0x806, &0x806
     89            ADC12CTL3 |= ADC12ICH2MAP_0;  // external pin is selected for ADC input channel A27
   \   000068   924206080608 MOV.W   &0x806, &0x806
     90            ADC12CTL3 |= ADC12ICH1MAP_0;  // external pin is selected for ADC input channel A28
   \   00006E   924206080608 MOV.W   &0x806, &0x806
     91            ADC12CTL3 |= ADC12ICH0MAP_0;  // external pin is selected for ADC input channel A29
   \   000074   924206080608 MOV.W   &0x806, &0x806
     92            ADC12CTL3 |= ADC12TCMAP_1;    // ADC internal temperature sensor ADC input channel A30
   \   00007A   B2D080000608 BIS.W   #0x80, &0x806
     93            ADC12CTL3 |= ADC12BATMAP_1;   // ADC internal 1/2 x AVCC is ADC input channel A31
   \   000080   B2D040000608 BIS.W   #0x40, &0x806
     94            ADC12CTL3 |= ADC12CSTARTADD_0; // 0h to 1Fh, corresponding to ADC12MEM0 to ADC12MEM31
   \   000086   924206080608 MOV.W   &0x806, &0x806
     95          
     96          // ADC10MCTL0 Register Description
     97            ADC12MCTL0 = RESET_STATE;
   \   00008C   82432008     MOV.W   #0x0, &0x820
     98            ADC12MCTL0 |= ADC12WINC_0;    // Comparator window disabled
   \   000090   924220082008 MOV.W   &0x820, &0x820
     99            ADC12MCTL0 |= ADC12DIF_0;     // Single-ended mode enabled
   \   000096   924220082008 MOV.W   &0x820, &0x820
    100            ADC12MCTL0 |= ADC12VRSEL_0;   // VR+ = AVCC, VR- = AVSS
   \   00009C   924220082008 MOV.W   &0x820, &0x820
    101            ADC12MCTL0 |= ADC12INCH_2;    // channel = A2 Thumb Wheel
   \   0000A2   A2D32008     BIS.W   #0x2, &0x820
    102          
    103            ADC12MCTL1 = RESET_STATE;
   \   0000A6   82432208     MOV.W   #0x0, &0x822
    104            ADC12MCTL1 |= ADC12WINC_0;  // Comparator window disabled
   \   0000AA   924222082208 MOV.W   &0x822, &0x822
    105            ADC12MCTL1 |= ADC12DIF_0;   // Single-ended mode enabled
   \   0000B0   924222082208 MOV.W   &0x822, &0x822
    106            ADC12MCTL1 |= ADC12VRSEL_0; // VR+ = AVCC, VR- = AVSS
   \   0000B6   924222082208 MOV.W   &0x822, &0x822
    107            ADC12MCTL1 |= ADC12INCH_5;  // channel = A5 Left
   \   0000BC   B2D005002208 BIS.W   #0x5, &0x822
    108          
    109            ADC12MCTL2 = RESET_STATE;
   \   0000C2   82432408     MOV.W   #0x0, &0x824
    110            ADC12MCTL2 |= ADC12WINC_0;  // Comparator window disabled
   \   0000C6   924224082408 MOV.W   &0x824, &0x824
    111            ADC12MCTL2 |= ADC12DIF_0;   // Single-ended mode enabled
   \   0000CC   924224082408 MOV.W   &0x824, &0x824
    112            ADC12MCTL2 |= ADC12VRSEL_0; // VR+ = AVCC, VR- = AVSS
   \   0000D2   924224082408 MOV.W   &0x824, &0x824
    113            ADC12MCTL2 |= ADC12INCH_4;  // channel = A4 Right
   \   0000D8   A2D22408     BIS.W   #0x4, &0x824
    114          
    115            ADC12MCTL3 = RESET_STATE;
   \   0000DC   82432608     MOV.W   #0x0, &0x826
    116            ADC12MCTL3 |= ADC12WINC_0;  // Comparator window disabled
   \   0000E0   924226082608 MOV.W   &0x826, &0x826
    117            ADC12MCTL3 |= ADC12DIF_0;   // Single-ended mode enabled
   \   0000E6   924226082608 MOV.W   &0x826, &0x826
    118            ADC12MCTL3 |= ADC12VRSEL_0; // VR+ = AVCC, VR- = AVSS
   \   0000EC   924226082608 MOV.W   &0x826, &0x826
    119            ADC12MCTL3 |= ADC12INCH_30; // Temp sensor
   \   0000F2   B2D01E002608 BIS.W   #0x1e, &0x826
    120          
    121            ADC12MCTL4 = RESET_STATE;
   \   0000F8   82432808     MOV.W   #0x0, &0x828
    122            ADC12MCTL4 |= ADC12WINC_0;  // Comparator window disabled
   \   0000FC   924228082808 MOV.W   &0x828, &0x828
    123            ADC12MCTL4 |= ADC12DIF_0;   // Single-ended mode enabled
   \   000102   924228082808 MOV.W   &0x828, &0x828
    124            ADC12MCTL4 |= ADC12VRSEL_0; // VR+ = AVCC, VR- = AVSS
   \   000108   924228082808 MOV.W   &0x828, &0x828
    125            ADC12MCTL4 |= ADC12INCH_31; // Battery voltage monitor
   \   00010E   B2D01F002808 BIS.W   #0x1f, &0x828
    126            ADC12MCTL4 |= ADC12EOS;     // End of Sequence
   \   000114   B2D080002808 BIS.W   #0x80, &0x828
    127          
    128          // ADC12IER0-2 Register Descriptions
    129            ADC12IER0 = RESET_STATE;    // Interrupts for channels  0 - 15
   \   00011A   82431208     MOV.W   #0x0, &0x812
    130            ADC12IER1 = RESET_STATE;    // Interrupts for channels 16 - 31
   \   00011E   82431408     MOV.W   #0x0, &0x814
    131            ADC12IER2 = RESET_STATE;    // Interrupts for ADC12RDYIE ADC12TOVIE ADC12OVIE
   \   000122   82431608     MOV.W   #0x0, &0x816
    132                                        // ADC12HIIE ADC12LOIE ADC12INIE
    133          							  
    134          //  ADC12IER0 |= ADC12IE4;      // Generate Interrupt for MEM2 ADC Data load//
    135            ADC12IER0 |= ADC12IE2;    // Generate Interrupt for MEM2 ADC Data load
   \   000126   A2D21208     BIS.W   #0x4, &0x812
    136          //  ADC12IER0 |= ADC12IE0;    // Enable ADC conv complete interrupt
    137          
    138            ADC12CTL0 |= ADC12ENC;     // Start conversion
   \   00012A   A2D30008     BIS.W   #0x2, &0x800
    139            ADC12CTL0 |= ADC12SC;      // Start sampling
   \   00012E   92D30008     BIS.W   #0x1, &0x800
    140          //------------------------------------------------------------------------------
    141          }
   \   000132   1001         RETA
   \   000134                REQUIRE _A_ADC12CTL0_L
   \   000134                REQUIRE _A_ADC12CTL1_L
   \   000134                REQUIRE _A_ADC12CTL2_L
   \   000134                REQUIRE _A_ADC12CTL3_L
   \   000134                REQUIRE _A_ADC12MCTL0_L
   \   000134                REQUIRE _A_ADC12MCTL1_L
   \   000134                REQUIRE _A_ADC12MCTL2_L
   \   000134                REQUIRE _A_ADC12MCTL3_L
   \   000134                REQUIRE _A_ADC12MCTL4_L
   \   000134                REQUIRE _A_ADC12IER0_L
   \   000134                REQUIRE _A_ADC12IER1_L
   \   000134                REQUIRE _A_ADC12IER2_L
    142          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_ADC
      6   Init_Conditions
        6   -> enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     308  Init_ADC
      90  Init_Conditions
       2  _A_ADC12CTL0_L
       2  _A_ADC12CTL1_L
       2  _A_ADC12CTL2_L
       2  _A_ADC12CTL3_L
       2  _A_ADC12IER0_L
       2  _A_ADC12IER1_L
       2  _A_ADC12IER2_L
       2  _A_ADC12MCTL0_L
       2  _A_ADC12MCTL1_L
       2  _A_ADC12MCTL2_L
       2  _A_ADC12MCTL3_L
       2  _A_ADC12MCTL4_L

 
 398 bytes in segment CODE
  24 bytes in segment DATA16_AN
 
 398 bytes of CODE memory
   0 bytes of DATA memory (+ 24 bytes shared)

Errors: none
Warnings: none
